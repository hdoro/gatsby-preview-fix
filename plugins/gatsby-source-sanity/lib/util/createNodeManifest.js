"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("../debug"));
const ONE_WEEK = 1000 * 60 * 60 * 24 * 7; // ms * sec * min * hr * day
let nodeManifestWarningWasLogged;
function createNodeManifest(actions, args, node, publishedId) {
    // @TODO: debug createNodeManifest
    return;
    try {
        const { unstable_createNodeManifest } = actions;
        const { getNode } = args;
        const type = node.internal.type;
        const autogeneratedTypes = ['SanityFileAsset', 'SanityImageAsset'];
        const createNodeManifestIsSupported = typeof unstable_createNodeManifest === 'function';
        const nodeTypeNeedsManifest = autogeneratedTypes.includes(type) === false;
        const shouldCreateNodeManifest = createNodeManifestIsSupported && nodeTypeNeedsManifest;
        if (shouldCreateNodeManifest) {
            const updatedAt = new Date(node._updatedAt || Date.now());
            const nodeWasRecentlyUpdated = Date.now() - updatedAt.getTime() <=
                // Default to only create manifests for items updated in last week
                (process.env.CONTENT_SYNC_SANITY_HOURS_SINCE_ENTRY_UPDATE || ONE_WEEK);
            if (!nodeWasRecentlyUpdated)
                return;
            const nodeForManifest = getNode(node.id);
            const manifestId = `${publishedId}-${updatedAt.toISOString()}`;
            unstable_createNodeManifest({ manifestId, node: nodeForManifest });
        }
        else if (!createNodeManifestIsSupported && !nodeManifestWarningWasLogged) {
            args.reporter.warn(`Sanity: Your version of Gatsby core doesn't support Content Sync (via the unstable_createNodeManifest action). Please upgrade to the latest version to use Content Sync in your site.`);
            nodeManifestWarningWasLogged = true;
        }
    }
    catch (e) {
        let result = e.message;
        (0, debug_1.default)(`Cannot create node manifest`, result);
    }
}
exports.default = createNodeManifest;
//# sourceMappingURL=createNodeManifest.js.map